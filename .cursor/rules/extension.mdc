---
description: 
globs: 
alwaysApply: true
---
# Extension global rules:

- The directory `/src/extension/` is the root dir of the extension. All required code to run the extension must be located from there, so it can be bundled.

- Local browser cache uses the browser IndexedDB (if possible avoid localStorage).

- **File naming convention**: ALL file names must use lowerCamelCase (e.g., `followButton.tsx`, `injectionService.ts`, `siteAdapter.ts`). Never use PascalCase for file names.

# Chrome Extension Development:

- Extension can be loaded as unpacked extension in Chrome for development.

- Build process: `npm run build:extension` creates `dist/extension/` folder with all required files.

- Development workflow: Use `npm run dev:extension` for watch mode, then reload extension in Chrome.

- Required files in `dist/extension/` for Chrome: `manifest.json`, `background.js`, `content.js`, `content.css`, HTML files.

- Extension configuration: All build config (package.json, vite.config.ts, etc.) located in `src/extension/`.

- Chrome runtime files: All Chrome extension files (manifest.json, background.ts, content.ts, etc.) organized in `src/extension/chrome/`.

- Workspace isolation: Extension has independent dependencies and build process from root project.

- Command execution: Always run extension commands from project root using `npm run build:extension` or `npm run dev:extension`.

# Clean Architecture for Extension:

## Core Layer (`/src/extension/core/`):
- **Business Logic**: All extension business logic must be in core layer.
- **Injection System**: Generic DOM injection logic, container creation, and React rendering utilities.
- **Data Models**: Property listing models, follow state management.
- **Use Cases**: Follow/unfollow property, manage listings, sync data.
- **Ports (Interfaces)**: Define contracts that adapters must implement.
- **No Site Dependencies**: Core must never import or depend on site-specific code.

## Adapter Layer (`/src/extension/front-adapters/{site-name}/`):
- **Site-Specific Logic**: Handle only site-specific DOM parsing and URL detection.
- **Data Extraction**: Parse property data from site-specific DOM structure.
- **Selector Strategy**: Provide site-specific selectors and insertion strategies to core.
- **Adapter Implementation**: Implement core interfaces/ports for the specific site.
- **No Business Logic**: Adapters must not contain business logic or generic injection code.

# When implementing site adapters:

- Create separate adapter for each site supported by the extension in `/src/extension/front-adapters/{site-name}/`.

- **adapter.ts**: Handle site-specific DOM parsing, data extraction, and URL detection only.

- **inject.tsx**: Site entry point that configures core injection system with site-specific strategies.

- **Implement ports**: All adapters must implement standard interfaces defined in `/src/extension/core/ports/`.

- **Delegate to core**: Adapters must delegate all injection, rendering, and business logic to core layer.

- **Site-specific only**: Adapters should only contain code that is unique to that specific site.

- Provide fallback for missing or changed page elements.

- Maintain compatibility with site updates.

# Leboncoin-specific rules:

- Individual ad URL pattern: `https://www.leboncoin.fr/ad/ventes_immobilieres/{id}`

- Listing page URL: `https://www.leboncoin.fr/ventes_immobilieres/`

- Extension should inject Follow button ONLY on individual ad pages, not listing pages.

- URL matching pattern in manifest: `https://www.leboncoin.fr/ad/ventes_immobilieres/*`